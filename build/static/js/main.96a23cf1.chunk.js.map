{"version":3,"sources":["logic/get_epsilon_reachable_states.js","logic/list_equal.js","logic/convert.js","logic/get_reachable_states.js","logic/move_through_transition.js","components/form.js","components/table.js","components/app.js","index.js"],"names":["get_epsilon_reachable_states","state","data_states","searchedStates","epsilon_reachable_states","concat","find","s","state_name","transitions","forEach","t","transition","includes","destiny_state_name","list_equal","list1","list2","length","i","indexOf","convert","nfa","q_zero","initialState","l","push","actual_State","new_state","alphabet","data","dfa","searched","temp_reachable_states","queue","shift","final_state","q","map","filter","item","move_through_transition","flat","index","self","destiny_state","existsInList","d","Form","props","handleSubmit","bind","this","updateState","formValues","newState","splice","className","placeholder","name","value","onChange","handleNameChange","type","defaultChecked","isFinalState","handleStateTransitionChange","onClick","removeStateTransition","addStateTransition","removeState","e","target","event","alert","JSON","stringify","preventDefault","onSubmit","createUI","handleChange","addState","React","Component","Table","list","join","el","style","fontWeight","null_handler","t_i","App","showResult","setState","error","console","ModeEdit","showDfa","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96a23cf1.chunk.js","sourcesContent":["/*\r\nGiven a state, get all reachable states by a epsilon\r\n\r\nParameters:\r\n    State: String\r\n    data_states: Structure where is a transition and a destiny state, example:\r\n                        {transition:\"a\",destiny_state_name:\"2\"}\r\n\r\nReturns:\r\n    Return a list of all states conected by epsilon\r\n*/\r\n\r\nexport default function get_epsilon_reachable_states(state, data_states, searchedStates=[]) {\r\n    \r\n    let epsilon_reachable_states = [state]; // It's implicit that all states has a epsilon\r\n    // transition to themselves\r\n    searchedStates = searchedStates.concat(state);\r\n\r\n    data_states.find(s => s.state_name === state).transitions.forEach(t => {\r\n        if (t.transition === \"e\" && !(searchedStates.includes(t.destiny_state_name))){ \r\n            epsilon_reachable_states = epsilon_reachable_states\r\n                    .concat(get_epsilon_reachable_states(t.destiny_state_name, data_states,searchedStates))\r\n        }\r\n    });\r\n\r\n    return epsilon_reachable_states;\r\n}","/* \r\nCompare two list, if they have the same values return true regardless the order\r\n\r\nParameters:\r\n    list1: array object\r\n    list2: array object\r\n\r\nReturns:\r\n    True if have the same values, false if not\r\n*/\r\n\r\nexport default function list_equal(list1, list2) {\r\n    if(list1.length !== list2.length)\r\n        return false;\r\n\r\n    for (let i = 0; i < list1.length; i++) {\r\n        if( list2.indexOf(list1[i]) < 0 )\r\n              return false;\r\n      }\r\n\r\n    return true;\r\n}","import get_reachable_states from \"./get_reachable_states\"\r\nimport get_epsilon_reachable_states from './get_epsilon_reachable_states';\r\nimport list_equal from \"./list_equal\"\r\n\r\nexport default function convert(nfa) {\r\n    let q_zero = nfa.initialState;\r\n\r\n    nfa.nfa.forEach(state => state.transitions.forEach(l => {\r\n        if (nfa.transitions.indexOf(l.transition) < 0 && l.transition !== 'e')\r\n            nfa.transitions.push(l.transition)\r\n    }\r\n    ));\r\n\r\n    let alphabet = nfa.transitions;\r\n    let data = nfa.nfa; // states with transitions\r\n\r\n    /*\r\n\r\n    table of the dfa:\r\n\r\n      | t1 | t2\r\n    a |  a |  b\r\n    b |  c |  cd\r\n\r\n    represantive structure:\r\n\r\n    [\r\n        {\r\n            state: [a]\r\n            transitions: [\r\n                \"destiny_state\": [\r\n                    \"a\"\r\n                ],\r\n                \"transition\": \"t1\"\r\n                },\r\n                {\r\n                \"destiny_state\": [\r\n                    \"b\"\r\n                ],\r\n                \"transition\": \"t2\",\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            state: [b]\r\n            transitions: [\r\n                \"destiny_state\": [\r\n                    \"c\"\r\n                ],\r\n                \"transition\": \"t1\"\r\n                },\r\n                {\r\n                \"destiny_state\": [\r\n                    c,d\r\n                ],\r\n                \"transition\": \"t2\",\r\n                }\r\n            ]\r\n        },\r\n    ]\r\n    */\r\n\r\n    let dfa = [];\r\n    let searched = [];\r\n    let temp_reachable_states = [];\r\n    let actual_State;\r\n    let new_state;\r\n\r\n    let queue=[get_epsilon_reachable_states(q_zero,data)];\r\n    while(queue.length!==0){\r\n        actual_State=queue[0];// [c d]\r\n        queue.shift(); //delete first element\r\n        new_state = { state: actual_State, transitions: [], final_state: false }\r\n\r\n        searched.push(actual_State);\r\n        \r\n        alphabet.forEach(t => { // t1\r\n            temp_reachable_states = [];\r\n\r\n            actual_State.forEach(q => { // c\r\n                temp_reachable_states = temp_reachable_states.concat(get_reachable_states(q, data, t)); \r\n            });\r\n            temp_reachable_states = temp_reachable_states.filter((item,index,self) => self.indexOf(item)===index)   //eliminate duplicate values\r\n            \r\n            new_state.transitions.push({\r\n                destiny_state: temp_reachable_states,\r\n                transition: t\r\n            });\r\n            if (!existsInList(queue, temp_reachable_states) && !existsInList(searched, temp_reachable_states) && temp_reachable_states.length!==0)\r\n                queue.push(temp_reachable_states); \r\n        });\r\n        dfa.push(new_state);\r\n    }\r\n    dfa.forEach(state=>{\r\n        state.state.forEach(s => {\r\n            if(data.find(d=>s===d.state_name).final_state)\r\n                state.final_state=true;\r\n        })\r\n    })\r\n    return dfa\r\n}\r\n\r\nfunction existsInList(queue, state) {\r\n    for (let i = 0; i < queue.length; i++) {\r\n        if (list_equal(queue[i], state))\r\n            return true;\r\n    }\r\n    return false;\r\n}","\r\nimport get_epsilon_reachable_states from './get_epsilon_reachable_states';\r\nimport move_through_transition from './move_through_transition';\r\n/*\r\nGiven a state, get all reachable states by a transition.\r\n\r\nParameters:\r\n    State: String - State to apply the function\r\n    data_states: a list of structures where is a transition and a \r\n                    destiny state, example: {transition:\"a\",destiny_state:\"2\"}\r\n    transition: String - selected transition to search\r\n\r\nReturns:\r\n    Return a list of all reachable states by a transition.\r\n*/\r\n\r\nexport default function get_reachable_states(state, data_states, transition) {\r\n    let epsilon_states = get_epsilon_reachable_states(state, data_states);\r\n    \r\n    let moved_states = epsilon_states\r\n                        .map(s=>move_through_transition(s,data_states,transition))\r\n                        .filter(item=>item.length!==0) // eliminate empty ones\r\n    // get epsilons transitions of each state resulting in an array of 3 dimensions\r\n    let epsilon_moved_states = moved_states\r\n            .map(s=>s.map(t=>get_epsilon_reachable_states(t,data_states))) \r\n            .flat(2)                                                   // flat to 1d\r\n            .filter((item,index,self) => self.indexOf(item)===index)   //eliminate duplicate values\r\n    return epsilon_moved_states\r\n}\r\n\r\n","/*\r\nMove a state through a transition\r\n\r\nParameters:\r\n    State: String\r\n    data_states: A list of structures where is a transition and a destiny state, example:\r\n                        {transition:\"a\",destiny_state_name:\"2\"}\r\n    Transition: String \r\n\r\nReturns:\r\n    Return a list of all states conected by the transition\r\n*/\r\nexport default function move_through_transition(state,data_states,transition){\r\n    let transitions = data_states.find(s=>s.state_name===state).transitions //get all transitions of each state\r\n\r\n            .filter(t=>t.transition=== transition); // filter them by the transition we need\r\n    transitions = transitions.map(item=>item.destiny_state_name)\r\n    return transitions\r\n}\r\n\r\n","import React from 'react';\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    addState() {\r\n        this.props.updateState({\r\n            nfa: [...this.props.formValues.nfa, {state_name: \"\", final_state:false, transitions: [{transition:\"\", destiny_state_name: \"\"}] }]\r\n        });\r\n    }\r\n\r\n    addStateTransition(i,state) {\r\n        let newState = [...this.props.formValues.nfa]\r\n        state.transitions = state.transitions.concat([{transition:\"\", destiny_state_name: \"\"}]);\r\n        newState[i] = state\r\n\r\n        this.props.updateState(\r\n        {\r\n            nfa: newState\r\n        });\r\n    }\r\n\r\n    removeStateTransition(i, index,state){\r\n       let newState = [...this.props.formValues.nfa];\r\n            state.transitions.splice(index, 1);\r\n            newState[i] = state\r\n\r\n            this.props.updateState(\r\n                {\r\n                    nfa: newState\r\n                });\r\n    }\r\n    \r\n\r\n    removeState(i) {\r\n        let newState = [...this.props.formValues.nfa];\r\n        newState.splice(i, 1);\r\n        this.props.updateState(\r\n            {\r\n                nfa: newState\r\n            });\r\n    }\r\n\r\n    isFinalState(i,state){\r\n        let newState = [...this.props.formValues.nfa]\r\n        state.final_state=!state.final_state;\r\n        newState[i] = state\r\n\r\n        this.props.updateState(\r\n        {\r\n            nfa: newState\r\n        });\r\n    }\r\n\r\n    createUI() {\r\n        return this.props.formValues.nfa.map((state, i) => (\r\n            <div key={i}>\r\n                <input className=\"state\" placeholder=\"State\" name=\"state_name\" value={state.state_name || ''} onChange={this.handleNameChange.bind(this, i)} />\r\n                <label className=\"finalState\"><input type=\"checkbox\" value={state.final_state} defaultChecked={state.final_state} onChange={this.isFinalState.bind(this, i,state)}/>Final state </label>\r\n                {state.transitions.map((item,index) => (\r\n                    <li key={index}> \r\n                        <input className=\"transition\" placeholder=\"transition\" name=\"transition\" value={item.transition || ''} onChange={this.handleStateTransitionChange.bind(this, i,index)} />\r\n                        <input className=\"transition\" placeholder=\"destiny state name\" name=\"destiny_state_name\" value={item.destiny_state_name || ''} onChange={this.handleStateTransitionChange.bind(this, i,index)} />\r\n                        <input type='button' value='remove state transition' onClick={this.removeStateTransition.bind(this,i, index, state)} />\r\n                    </li>\r\n                ) )}\r\n                <input type='button' value='add state transition' onClick={this.addStateTransition.bind(this, i, state)} />\r\n                <input type='button' value='remove state' onClick={this.removeState.bind(this, i)} />\r\n            </div>\r\n        ))\r\n    }\r\n    \r\n    handleStateTransitionChange(i,index,e){\r\n        const { name, value } = e.target;\r\n        let newState = [...this.props.formValues.nfa];\r\n        newState[i].transitions[index] = { ...newState[i].transitions[index], [name]: value };\r\n        this.props.updateState(\r\n            {\r\n                nfa: newState\r\n            });\r\n    }\r\n\r\n    handleNameChange(i, e) {\r\n        const { name, value } = e.target;\r\n        let newState = [...this.props.formValues.nfa];\r\n        newState[i] = { ...newState[i], [name]: value };\r\n        this.props.updateState(\r\n            {\r\n                nfa: newState\r\n            });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert('A name was submitted: ' + JSON.stringify(this.props.formValues));\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(e){\r\n        const { name, value } = e.target;\r\n        this.props.updateState({[name]: value});\r\n    }\r\n\r\n    addTransition(){\r\n\r\n        this.props.updateState({transitions: this.props.formValues.transitions.concat(\"\")});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                {this.createUI()}\r\n\r\n                <input className=\"startState\" placeholder=\"start state\" name=\"initialState\" value={ this.props.formValues.initialState} onChange={this.handleChange.bind(this)} />\r\n\r\n                <input type='button' value='add new state' onClick={this.addState.bind(this)} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nclass Table extends React.Component {\r\n\r\n    null_handler(list,i){\r\n        if(list.length===0)\r\n            return \"∅\"\r\n        return list.join(\"\");;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th> </th>\r\n                        {this.props.data.transitions.map((el, i) => (\r\n                            <th key={i}>{el}</th>\r\n                        ))}\r\n                    </tr>\r\n                    \r\n                    {this.props.data.dfa.map((s,i) => (\r\n\r\n                        <tr key={i} >\r\n                            <td style={ s.final_state ? { fontWeight: 'bold' } : { fontWeight: 'normal' } } >{this.null_handler(s.state,i)}</td>\r\n                            {s.transitions.map((transition,t_i)=>\r\n                                <td key={t_i}>{this.null_handler(transition.destiny_state)}</td>\r\n                            )}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport convert from '../logic/convert';\r\n\r\nimport Form from './form'\r\nimport Table from './table'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n       this.state = {\r\n            nfa: [{ state_name: \"\",\"final_state\":false, transitions: [{ transition: \"\", destiny_state_name: \"\" }] }],\r\n            transitions: [],\r\n            initialState: \"\",\r\n            dfa:[],\r\n            showResult: false\r\n        };\r\n        this.updateState = this.updateState.bind(this)\r\n    }\r\n\r\n    updateState(newState) {\r\n        this.setState(newState)\r\n    }\r\n\r\n    showDfa() {\r\n        try{\r\n            this.setState({ dfa: convert(this.state),\r\n            showResult : true })\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setState({ showResult : true })\r\n        }\r\n    }\r\n\r\n    ModeEdit(){\r\n        this.setState({ showResult: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                this.state.showResult?\r\n                <div>\r\n                    <h3>NOTE: The ones in bold font are final states and the empty symbol is a trash state or dead state </h3>\r\n                    <Table \r\n                        data={this.state} \r\n                    ></Table>\r\n                    <input type=\"button\" value=\"Go back\" onClick={this.ModeEdit.bind(this)} />\r\n                </div>\r\n                :\r\n                <div>\r\n                    <h3>NOTE: If you want to add a epsilon transition you can use the lowecase letter \"e\" as the transition</h3>\r\n                    <Form\r\n                        updateState={this.updateState.bind(this)}\r\n                        formValues={this.state}\r\n                    ></Form>\r\n                    <input type=\"button\" value=\"convert\" onClick={this.showDfa.bind(this)} />\r\n                </div>\r\n                }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles.css';\r\n\r\nimport App from './components/app'\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}