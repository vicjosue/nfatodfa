{"version":3,"sources":["logic/get_epsilon_reachable_states.js","logic/list_equal.js","logic/convert.js","logic/get_reachable_states.js","logic/move_through_transition.js","components/form.js","components/table.js","components/app.js","index.js"],"names":["get_epsilon_reachable_states","state","data_states","searchedStates","arguments","length","undefined","epsilon_reachable_states","concat","find","s","state_name","transitions","forEach","t","transition","includes","destiny_state_name","list_equal","list1","list2","i","indexOf","convert","nfa","q_zero","initialState","l","push","actual_State","new_state","alphabet","data","dfa","searched","temp_reachable_states","queue","shift","final_state","q","map","filter","item","move_through_transition","flat","index","self","destiny_state","existsInList","d","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","updateState","toConsumableArray","formValues","newState","splice","_this2","react_default","a","createElement","key","className","placeholder","name","value","onChange","handleNameChange","type","defaultChecked","isFinalState","handleStateTransitionChange","onClick","removeStateTransition","addStateTransition","removeState","e","_e$target","target","objectSpread","defineProperty","_e$target2","event","alert","JSON","stringify","preventDefault","_e$target3","onSubmit","createUI","handleChange","addState","React","Component","Table","list","join","el","style","fontWeight","null_handler","t_i","App","showResult","setState","error","console","table","ModeEdit","components_form","showDfa","ReactDOM","render","app","document","getElementById"],"mappings":"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","file":"static/js/main.b3d5843f.chunk.js","sourcesContent":["/*\r\nGiven a state, get all reachable states by a epsilon\r\n\r\nParameters:\r\n    State: String\r\n    data_states: Structure where is a transition and a destiny state, example:\r\n                        {transition:\"a\",destiny_state_name:\"2\"}\r\n\r\nReturns:\r\n    Return a list of all states conected by epsilon\r\n*/\r\n\r\nexport default function get_epsilon_reachable_states(state, data_states, searchedStates=[]) {\r\n    \r\n    let epsilon_reachable_states = [state]; // It's implicit that all states has a epsilon\r\n    // transition to themselves\r\n    searchedStates = searchedStates.concat(state);\r\n\r\n    data_states.find(s => s.state_name === state).transitions.forEach(t => {\r\n        if (t.transition === \"e\" && !(searchedStates.includes(t.destiny_state_name))){ \r\n            epsilon_reachable_states = epsilon_reachable_states\r\n                    .concat(get_epsilon_reachable_states(t.destiny_state_name, data_states,searchedStates))\r\n        }\r\n    });\r\n\r\n    return epsilon_reachable_states;\r\n}","/* \r\nCompare two list, if they have the same values return true regardless the order\r\n\r\nParameters:\r\n    list1: array object\r\n    list2: array object\r\n\r\nReturns:\r\n    True if have the same values, false if not\r\n*/\r\n\r\nexport default function list_equal(list1, list2) {\r\n    if(list1.length !== list2.length)\r\n        return false;\r\n\r\n    for (let i = 0; i < list1.length; i++) {\r\n        if( list2.indexOf(list1[i]) < 0 )\r\n              return false;\r\n      }\r\n\r\n    return true;\r\n}","import get_reachable_states from \"./get_reachable_states\"\r\nimport get_epsilon_reachable_states from './get_epsilon_reachable_states';\r\nimport list_equal from \"./list_equal\"\r\n\r\nexport default function convert(nfa) {\r\n    let q_zero = nfa.initialState;\r\n\r\n    nfa.nfa.forEach(state => state.transitions.forEach(l => {\r\n        if (nfa.transitions.indexOf(l.transition) < 0 && l.transition !== 'e')\r\n            nfa.transitions.push(l.transition)\r\n    }\r\n    ));\r\n\r\n    let alphabet = nfa.transitions;\r\n    let data = nfa.nfa; // states with transitions\r\n\r\n    /*\r\n\r\n    table of the dfa:\r\n\r\n      | t1 | t2\r\n    a |  a |  b\r\n    b |  c |  cd\r\n\r\n    represantive structure:\r\n\r\n    [\r\n        {\r\n            state: [a]\r\n            transitions: [\r\n                \"destiny_state\": [\r\n                    \"a\"\r\n                ],\r\n                \"transition\": \"t1\"\r\n                },\r\n                {\r\n                \"destiny_state\": [\r\n                    \"b\"\r\n                ],\r\n                \"transition\": \"t2\",\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            state: [b]\r\n            transitions: [\r\n                \"destiny_state\": [\r\n                    \"c\"\r\n                ],\r\n                \"transition\": \"t1\"\r\n                },\r\n                {\r\n                \"destiny_state\": [\r\n                    c,d\r\n                ],\r\n                \"transition\": \"t2\",\r\n                }\r\n            ]\r\n        },\r\n    ]\r\n    */\r\n\r\n    let dfa = [];\r\n    let searched = [];\r\n    let temp_reachable_states = [];\r\n    let actual_State;\r\n    let new_state;\r\n\r\n    let queue=[get_epsilon_reachable_states(q_zero,data)];\r\n    while(queue.length!==0){\r\n        actual_State=queue[0];// [c d]\r\n        queue.shift(); //delete first element\r\n        new_state = { state: actual_State, transitions: [], final_state: false }\r\n\r\n        searched.push(actual_State);\r\n        \r\n        alphabet.forEach(t => { // t1\r\n            temp_reachable_states = [];\r\n\r\n            actual_State.forEach(q => { // c\r\n                temp_reachable_states = temp_reachable_states.concat(get_reachable_states(q, data, t)); \r\n            });\r\n            temp_reachable_states = temp_reachable_states.filter((item,index,self) => self.indexOf(item)===index)   //eliminate duplicate values\r\n            \r\n            new_state.transitions.push({\r\n                destiny_state: temp_reachable_states,\r\n                transition: t\r\n            });\r\n            if (!existsInList(queue, temp_reachable_states) && !existsInList(searched, temp_reachable_states) && temp_reachable_states.length!==0)\r\n                queue.push(temp_reachable_states); \r\n        });\r\n        dfa.push(new_state);\r\n    }\r\n    dfa.forEach(state=>{\r\n        state.state.forEach(s => {\r\n            if(data.find(d=>s===d.state_name).final_state)\r\n                state.final_state=true;\r\n        })\r\n    })\r\n    return dfa\r\n}\r\n\r\nfunction existsInList(queue, state) {\r\n    for (let i = 0; i < queue.length; i++) {\r\n        if (list_equal(queue[i], state))\r\n            return true;\r\n    }\r\n    return false;\r\n}","\r\nimport get_epsilon_reachable_states from './get_epsilon_reachable_states';\r\nimport move_through_transition from './move_through_transition';\r\n/*\r\nGiven a state, get all reachable states by a transition.\r\n\r\nParameters:\r\n    State: String - State to apply the function\r\n    data_states: a list of structures where is a transition and a \r\n                    destiny state, example: {transition:\"a\",destiny_state:\"2\"}\r\n    transition: String - selected transition to search\r\n\r\nReturns:\r\n    Return a list of all reachable states by a transition.\r\n*/\r\n\r\nexport default function get_reachable_states(state, data_states, transition) {\r\n    let epsilon_states = get_epsilon_reachable_states(state, data_states);\r\n    \r\n    let moved_states = epsilon_states\r\n                        .map(s=>move_through_transition(s,data_states,transition))\r\n                        .filter(item=>item.length!==0) // eliminate empty ones\r\n    // get epsilons transitions of each state resulting in an array of 3 dimensions\r\n    let epsilon_moved_states = moved_states\r\n            .map(s=>s.map(t=>get_epsilon_reachable_states(t,data_states))) \r\n            .flat(2)                                                   // flat to 1d\r\n            .filter((item,index,self) => self.indexOf(item)===index)   //eliminate duplicate values\r\n    return epsilon_moved_states\r\n}\r\n\r\n","/*\r\nMove a state through a transition\r\n\r\nParameters:\r\n    State: String\r\n    data_states: A list of structures where is a transition and a destiny state, example:\r\n                        {transition:\"a\",destiny_state_name:\"2\"}\r\n    Transition: String \r\n\r\nReturns:\r\n    Return a list of all states conected by the transition\r\n*/\r\nexport default function move_through_transition(state,data_states,transition){\r\n    let transitions = data_states.find(s=>s.state_name===state).transitions //get all transitions of each state\r\n\r\n            .filter(t=>t.transition=== transition); // filter them by the transition we need\r\n    transitions = transitions.map(item=>item.destiny_state_name)\r\n    return transitions\r\n}\r\n\r\n","import React from 'react';\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    addState() {\r\n        this.props.updateState({\r\n            nfa: [...this.props.formValues.nfa, {state_name: \"\", final_state:false, transitions: [{transition:\"\", destiny_state_name: \"\"}] }]\r\n        });\r\n    }\r\n\r\n    addStateTransition(i,state) {\r\n        let newState = [...this.props.formValues.nfa]\r\n        state.transitions = state.transitions.concat([{transition:\"\", destiny_state_name: \"\"}]);\r\n        newState[i] = state\r\n\r\n        this.props.updateState(\r\n        {\r\n            nfa: newState\r\n        });\r\n    }\r\n\r\n    removeStateTransition(i, index,state){\r\n       let newState = [...this.props.formValues.nfa];\r\n            state.transitions.splice(index, 1);\r\n            newState[i] = state\r\n\r\n            this.props.updateState(\r\n                {\r\n                    nfa: newState\r\n                });\r\n    }\r\n    \r\n\r\n    removeState(i) {\r\n        let newState = [...this.props.formValues.nfa];\r\n        newState.splice(i, 1);\r\n        this.props.updateState(\r\n            {\r\n                nfa: newState\r\n            });\r\n    }\r\n\r\n    isFinalState(i,state){\r\n        let newState = [...this.props.formValues.nfa]\r\n        state.final_state=!state.final_state;\r\n        newState[i] = state\r\n\r\n        this.props.updateState(\r\n        {\r\n            nfa: newState\r\n        });\r\n    }\r\n\r\n    createUI() {\r\n        return this.props.formValues.nfa.map((state, i) => (\r\n            <div key={i}>\r\n                <input className=\"state\" placeholder=\"State\" name=\"state_name\" value={state.state_name || ''} onChange={this.handleNameChange.bind(this, i)} />\r\n                <label className=\"finalState\"><input type=\"checkbox\" value={state.final_state} defaultChecked={state.final_state} onChange={this.isFinalState.bind(this, i,state)}/>Final state </label>\r\n                {state.transitions.map((item,index) => (\r\n                    <li key={index}> \r\n                        <input className=\"transition\" placeholder=\"transition\" name=\"transition\" value={item.transition || ''} onChange={this.handleStateTransitionChange.bind(this, i,index)} />\r\n                        <input className=\"transition\" placeholder=\"destiny state name\" name=\"destiny_state_name\" value={item.destiny_state_name || ''} onChange={this.handleStateTransitionChange.bind(this, i,index)} />\r\n                        <input type='button' value='remove state transition' onClick={this.removeStateTransition.bind(this,i, index, state)} />\r\n                    </li>\r\n                ) )}\r\n                <input type='button' value='add state transition' onClick={this.addStateTransition.bind(this, i, state)} />\r\n                <input type='button' value='remove state' onClick={this.removeState.bind(this, i)} />\r\n            </div>\r\n        ))\r\n    }\r\n    \r\n    handleStateTransitionChange(i,index,e){\r\n        const { name, value } = e.target;\r\n        let newState = [...this.props.formValues.nfa];\r\n        newState[i].transitions[index] = { ...newState[i].transitions[index], [name]: value };\r\n        this.props.updateState(\r\n            {\r\n                nfa: newState\r\n            });\r\n    }\r\n\r\n    handleNameChange(i, e) {\r\n        const { name, value } = e.target;\r\n        let newState = [...this.props.formValues.nfa];\r\n        newState[i] = { ...newState[i], [name]: value };\r\n        this.props.updateState(\r\n            {\r\n                nfa: newState\r\n            });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert('A name was submitted: ' + JSON.stringify(this.props.formValues));\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(e){\r\n        const { name, value } = e.target;\r\n        this.props.updateState({[name]: value});\r\n    }\r\n\r\n    addTransition(){\r\n\r\n        this.props.updateState({transitions: this.props.formValues.transitions.concat(\"\")});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                {this.createUI()}\r\n\r\n                <input className=\"startState\" placeholder=\"start state\" name=\"initialState\" value={ this.props.formValues.initialState} onChange={this.handleChange.bind(this)} />\r\n\r\n                <input type='button' value='add new state' onClick={this.addState.bind(this)} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nclass Table extends React.Component {\r\n\r\n    null_handler(list,i){\r\n        if(list.length===0)\r\n            return \"∅\"\r\n        return list.join(\"\");;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th> </th>\r\n                        {this.props.data.transitions.map((el, i) => (\r\n                            <th key={i}>{el}</th>\r\n                        ))}\r\n                    </tr>\r\n                    \r\n                    {this.props.data.dfa.map((s,i) => (\r\n\r\n                        <tr key={i} >\r\n                            <td style={ s.final_state ? { fontWeight: 'bold' } : { fontWeight: 'normal' } } >{this.null_handler(s.state,i)}</td>\r\n                            {s.transitions.map((transition,t_i)=>\r\n                                <td key={t_i}>{this.null_handler(transition.destiny_state)}</td>\r\n                            )}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport convert from '../logic/convert';\r\n\r\nimport Form from './form'\r\nimport Table from './table'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n       this.state = {\r\n            nfa: [{ state_name: \"\",\"final_state\":false, transitions: [{ transition: \"\", destiny_state_name: \"\" }] }],\r\n            transitions: [],\r\n            initialState: \"\",\r\n            dfa:[],\r\n            showResult: false\r\n        };\r\n        this.updateState = this.updateState.bind(this)\r\n    }\r\n\r\n    updateState(newState) {\r\n        this.setState(newState)\r\n    }\r\n\r\n    showDfa() {\r\n        try{\r\n            this.setState({ dfa: convert(this.state),\r\n            showResult : true })\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.setState({ showResult : true })\r\n        }\r\n    }\r\n\r\n    ModeEdit(){\r\n        this.setState({ showResult: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                this.state.showResult?\r\n                <div>\r\n                    <h3>NOTE: The ones in bold font are final states and the empty symbol is a trash state or dead state </h3>\r\n                    <Table \r\n                        data={this.state} \r\n                    ></Table>\r\n                    <input type=\"button\" value=\"Go back\" onClick={this.ModeEdit.bind(this)} />\r\n                </div>\r\n                :\r\n                <div>\r\n                    <h3>NOTE: If you want to add a epsilon transition you can use the lowecase letter \"e\" as the transition</h3>\r\n                    <Form\r\n                        updateState={this.updateState.bind(this)}\r\n                        formValues={this.state}\r\n                    ></Form>\r\n                    <input type=\"button\" value=\"convert\" onClick={this.showDfa.bind(this)} />\r\n                </div>\r\n                }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles.css';\r\n\r\nimport App from './components/app'\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}